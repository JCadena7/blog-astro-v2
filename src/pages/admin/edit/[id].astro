---
import { getCollection, type CollectionEntry } from 'astro:content';
import AdminLayout from '../../../layouts/AdminLayout.astro';
import MdxEditorWrapper from '../../../components/MdxEditorWrapper.jsx';

// Habilitar la pre-renderización estática
export const prerender = true;

interface Props {
	post: CollectionEntry<'blog'>;
}

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post: CollectionEntry<'blog'>) => ({
		params: { id: post.id },
		props: { post }
	}));
}

const { post } = Astro.props;

if (!post) {
	return Astro.redirect('/admin');
}

// Generar un ID único para cada instancia del editor
const editorId = `editor-${Math.random().toString(36).substring(2, 11)}`;

const { title, description, pubDate, heroImage } = post.data;

interface PostData {
	title: string;
	description: string;
	pubDate: Date;
	updatedDate?: Date;
	heroImage?: string;
}

type BlogPost = CollectionEntry<'blog'>;

const { title: postTitle, description: postDescription, pubDate: postPubDate, heroImage: postHeroImage } = post.data as PostData;
---

<AdminLayout title={`Editar: ${title}`}>
	<main class="container mx-auto px-4 py-8">
		<div class="max-w-4xl mx-auto">
			<div class="mb-8">
				<h1 class="text-3xl font-bold mb-2">Editar Post</h1>
				<p class="text-gray-600 dark:text-gray-400">
					Utiliza el editor visual para modificar el contenido con componentes de React y sintaxis de Markdown.
				</p>
			</div>

			<form id="edit-form" class="space-y-6">
				<input type="hidden" name="id" value={post.id}>
				
				<div class="grid gap-6 md:grid-cols-2">
					<div class="form-group">
						<label for="title" class="block text-sm font-medium mb-2">Título</label>
						<input 
							type="text" 
							id="title" 
							name="title" 
							value={title}
							class="w-full px-3 py-2 border rounded-md dark:bg-gray-800 dark:border-gray-700"
							required
						>
					</div>

					<div class="form-group">
						<label for="pubDate" class="block text-sm font-medium mb-2">Fecha de publicación</label>
						<input 
							type="date" 
							id="pubDate" 
							name="pubDate" 
							value={pubDate.toISOString().split('T')[0]}
							class="w-full px-3 py-2 border rounded-md dark:bg-gray-800 dark:border-gray-700"
							required
						>
					</div>
				</div>

				<div class="form-group">
					<label for="description" class="block text-sm font-medium mb-2">Descripción</label>
					<textarea 
						id="description" 
						name="description" 
						class="w-full px-3 py-2 border rounded-md dark:bg-gray-800 dark:border-gray-700"
						required
					>{description}</textarea>
				</div>

				<div class="form-group">
					<label for="heroImage" class="block text-sm font-medium mb-2">URL de imagen destacada</label>
					<input 
						type="url" 
						id="heroImage" 
						name="heroImage" 
						value={heroImage}
						class="w-full px-3 py-2 border rounded-md dark:bg-gray-800 dark:border-gray-700"
						placeholder="https://ejemplo.com/imagen.jpg"
					>
				</div>

				<div class="form-group">
					<label for="content" class="block text-sm font-medium mb-2">Contenido</label>
					<div class="border rounded-md dark:border-gray-700 overflow-hidden">
						<MdxEditorWrapper 
							client:load
							id="edit-post-editor" 
							initialContent={post.body}
						/>
					</div>
				</div>

				<div class="flex gap-4 justify-end">
					<a 
						href="/admin" 
						class="px-4 py-2 border rounded-md hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
					>
						Cancelar
					</a>
					<button
						type="button"
						id="preview-btn"
						class="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors"
					>
						Vista Previa
					</button>
					<button
						type="submit"
						class="px-4 py-2 bg-violet-500 text-white rounded-md hover:bg-violet-600 transition-colors"
					>
						Guardar Cambios
					</button>
				</div>
			</form>

			<div id="preview-container" class="mt-8 hidden">
				<div class="bg-white dark:bg-gray-800 rounded-lg p-6">
					<div class="flex justify-between items-center mb-4">
						<h2 class="text-2xl font-bold">Vista Previa</h2>
						<button
							type="button"
							id="close-preview"
							class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
						>
							Cerrar
						</button>
					</div>
					<div id="preview-content" class="prose dark:prose-invert max-w-none"></div>
				</div>
			</div>
		</div>
	</main>
</AdminLayout>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const form = document.getElementById('edit-form') as HTMLFormElement;
		const previewBtn = document.getElementById('preview-btn');
		const closePreviewBtn = document.getElementById('close-preview');
		const previewContainer = document.getElementById('preview-container');
		const previewContent = document.getElementById('preview-content');
		
		// Manejar vista previa
		if (previewBtn && previewContainer && previewContent) {
			previewBtn.addEventListener('click', (e) => {
				e.preventDefault();
				const content = window.getEditorContent('edit-post-editor');
				const titleInput = document.getElementById('title') as HTMLInputElement;
				const title = titleInput?.value || '';
				
				previewContent.innerHTML = `
					<h1>${title || 'Sin título'}</h1>
					<div class="prose dark:prose-invert">
						${content || 'Sin contenido'}
					</div>
				`;
				previewContainer.classList.remove('hidden');
			});
		}
		
		if (closePreviewBtn && previewContainer) {
			closePreviewBtn.addEventListener('click', () => {
				previewContainer.classList.add('hidden');
			});
		}
		
		// Manejar envío del formulario
		if (form) {
			form.addEventListener('submit', async (e) => {
				e.preventDefault();
				const formData = new FormData(form);
				const content = window.getEditorContent('edit-post-editor');
				formData.set('content', content);
				
				try {
					const response = await fetch('/api/posts/update', {
						method: 'POST',
						body: formData
					});

					if (!response.ok) {
						const data = await response.json();
						throw new Error(data.error || 'Error al actualizar el post');
					}

					window.location.href = '/admin';
				} catch (error: unknown) {
					console.error('Error:', error);
					if (error instanceof Error) {
						alert(error.message);
					} else {
						alert('Error al actualizar el post. Por favor, intenta de nuevo.');
					}
				}
			});
		}
	});
</script>

<style>
	.form-group {
		@apply space-y-1;
	}
	
	.prose {
		@apply max-w-none;
	}
</style> 